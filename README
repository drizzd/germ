Generic Entity Relationship Model

This set of python classes is meant to provide a generic way of dealing with
the physical representation of an entity relationship (ER) model. It allows the
definition of attributes, entities and relations and will handle them
appropriately. Implementation of the following actions is currently planned:
list, view, edit, delete and submit. They correspond to the SQL commands
SELECT, SELECT ... WHERE, UPDATE, DELETE and INSERT.

It also provides a framework for the implementation of a user interface that
will then be able to trigger various actions on specific entities. An HTML
interface using HTTP to execute actions is going to be available.

Furthermore, GERM provides an integrated privilege system. Apart from security
reasons this is also necessary for a complete constraint specification and to
ensure integrity of the system. The user interface should try not to provide
any illegal actions to spare the user annoying 'permission denied' errors. This
is much easier to do with a permission check for specific actions than by an
analysis of the potentially complex relational conditions. The idea is to hide
information that's irrelevant to the user.

Consider the following example of a tournament planning system:

There is a number of tourneys available. For each tourney teams can be formed.
Each tourney requires a specific number of team members. In a real situation,
the user may not be able to join a particular team for various reasons. For
instance, the system should prevent the user from joining a team if he is
already a member of a team that partakes in the same tournament. Furthermore,
the limit for the number of team members must not be exceeded. Also, it should
not be possible to join a team if the tournament has already started or if it
is already finished. Also, the system might want to check that the user has
paid the entrance fee before allowing to join a team.

Each of these conditions can easily be ensured by defining the appropriate
relations. Using this information, however, to determine if a menu entry should
be made available to the user depending on wether or not the user is currently
able to join _any_ team at all, is quite time-consuming. Therefore, I recommend
using the privilege system to provide for a crude outline of the user's current
possibilities.


Clemens Buchacher, 2005-03-19
