Roughly ordered by priority and simplicity from high to low.

o Make sure 'delete' does not violate consistency

o Put a simple demo up on sourceforge

o pso seems to be unmaintained. Find an alternative (e.g. weblib) or do it
  yourself. Use mysql instead of files to store session data.

o Add Distutils support

o Find a way to check that all foreign keys have the same type (and length).

o Save <ITEM> state (no_valid_keys, permission_denied, ...) between requests.

  Only reevaluate on successful 'submit' or 'edit' actions. 'view' or 'list'
  actions should not have any effects.

  Optionally hide items if the user is not privileged to use them (already
  done) and present the user with a login screen instead of permission denied
  message.

o Cache entity and action instances (singleton). Provide entity copy for
  manipulations.

o rewrite db_iface and add support for databases other than mysql

o Additional privilege features.

  Examples:

  - 'rank' should be editable, but only to a rank lower than the user's own
    rank (maybe possible with relations).

  - users privacy. 'view' permission should only be granted for fields as
    specified in the 'privacy' field.

  - 'paid' field in 'gamers' should not be editable by users.

  Ideas:

  - Implement dynamic attribute permissions. Instead of just passing a list of
    allowed values, also allow functions to do more elaborate checks.
    
    The problem with that is we don't have the reference group construct yet,
    so we have to wait for the primary key before we can do any useful checks.
    This also means we cannot know in advance if there will be any allowed
    attributes at all (Okay, that may not be too bad).

o Modularization

  - Find a way to to separate germ code, entity specifications and user
    interface code.

  - Some day it should be possible to cherrypick from available modules and
    automatically resolve interdependencies.
    
    Example (arrows indicate dependencies):

    users
    `-> news
    `-> forum
    `-> party
        `-> tournament
	`-> voting

o Show disabled values.

  When editing or submitting, also show attributes we have permission to view
  even if we do not have permission to edit/submit. Simply disable the
  elements.

o Attribute Notes.

  Sometimes it may be useful to add notes to the attributes. For example, when
  we use a password for authentication and we know that it might be transmitted
  over an insecure line (which it probably will for the hypertext user
  interface) we should add a note advising the user not to use a valuable
  password.

o JavaScript Focus.

  - Automatically focus the first form element (omitting the lock radio
    button). Or is that annoying?

  - Automatically select the lock radio button if the corresponding form
    element is edited (onchange="document.to_lockx[myelement].focus() or
    something like that)

o 'view' tables.

  Their purpose is the combination of different entities and constructed
  attributes (like age constructed from birthday and current date) to provide
  customized information.

o Automatic locking.

  Automatically lock fields with only one choice.
  
  Only do this after at least one step to give the user the chance to see that
  there is only one choice.  Otherwise this could be very confusing (imagine
  the user locks one field purposely to see which choice he has left for the
  other fields).

  On the other hand, if the user wants to edit his profile and even though he
  has only one choice, he still has to choose to edit himself. We can fix this,
  though, by providing an <ITEM> which already has the primary key set and
  locked.

o File Attribute.

  This attribute allows the system to save and retrieve files.

  Examples:

  - Upload image
  - Export tournament data in WWCL XML-format. (using a 'virtual' entity with a
    file attribute)

o Security.

  - Client-side password encryption (using Java/JavaScript?) or use SSL to get
    some security. Do not use cookies for secure sessions?

  - Check for availability of cookies. Use URL encoded session data?

o Use more powerful templating for Hypertext User Interface

  - Have a look at albatross/cheetah etc. At least for the 'list' action we
    definitely need more freedom for HTML design.

o User Interfaces

  - Tcl/Tk user interface

    Would be nice to implement more 'active' elements, like intrusion detection
    or other 'alert' features.

o Refactor keylist generation algorithm (ref_group.generate_keylist)

  I had a lot of trouble with that one and currently the code is a huge mess.
  It seems to work now, but there are some parts I find particularly troubling:

  - Do not use constant values in the join condition. MySQL seems to swallow
    it, but is that valid SQL? We can just as well use the WHERE clause. This
    would also move the locking condition to one place, which will be much
    easier to read.

  - Currently we have a special case for the 'edit' action. We try to ignore
    the entry itself to allow _not_ changing a value. Otherwise the algorithm
    would think that the value is already used by a different entry.
    
    Is there really no more generic way to handle this? For a submit, the entry
    cannot exist yet anyway, and for a view we don't change any values...

    Update: This has been party solved. The special case now applies to all
    relations which join the table with itself and is not restricted to the
    'edit' action any more. It seems to work, but thinking it over would not
    hurt.

  - We also have a special case if the reference group has only outer joins.
    Maybe we could also avoid that by joining with an empty table or something.
